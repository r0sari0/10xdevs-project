-- migration: initial_schema
-- description: creates the initial database schema for the ai flashcard generator application.
-- tables:
--   - generations: stores metadata for ai flashcard generation.
--   - flashcards: stores user-created flashcards (manual or ai-generated).
--   - generation_error_logs: logs errors during the ai generation process.
-- types:
--   - flashcard_source: enum for the origin of a flashcard.
-- functions:
--   - handle_updated_at: automatically updates the updated_at timestamp on row modification.
-- triggers:
--   - on_generations_update: trigger for the 'generations' table.
--   - on_flashcards_update: trigger for the 'flashcards' table.
-- policies:
--   - granular rls policies for 'generations', 'flashcards', and 'generation_error_logs' tables.
-- created_at: 2025-10-08 12:00:00 utc

-- custom types
-- this enum represents the origin of a flashcard.
create type flashcard_source as enum ('ai-full', 'ai-edited', 'manual');

-- tables
-- table: generations
-- stores metadata related to each ai flashcard generation process.
create table generations (
    id bigint primary key generated always as identity,
    user_id uuid not null references auth.users(id) on delete cascade,
    model varchar(255) not null,
    generated_count int not null,
    accepted_unedited_count int not null default 0,
    accepted_edited_count int not null default 0,
    source_text_hash varchar(64) not null,
    source_text_length int not null check (source_text_length >= 1000 and source_text_length <= 10000),
    generation_duration int not null, -- in milliseconds
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

-- enable row level security for the 'generations' table.
alter table generations enable row level security;

-- table: flashcards
-- contains all flashcards, whether created manually or generated by ai.
create table flashcards (
    id bigint primary key generated always as identity,
    user_id uuid not null references auth.users(id) on delete cascade,
    generation_id bigint null references generations(id) on delete cascade,
    front varchar(200) not null,
    back varchar(500) not null,
    source flashcard_source not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

-- enable row level security for the 'flashcards' table.
alter table flashcards enable row level security;

-- table: generation_error_logs
-- stores logs of errors that occur during the ai generation process.
create table generation_error_logs (
    id bigint primary key generated always as identity,
    user_id uuid not null references auth.users(id) on delete cascade,
    model varchar(255) not null,
    source_text_hash varchar(64) not null,
    source_text_length int not null check (source_text_length >= 1000 and source_text_length <= 10000),
    error_code varchar(100) not null,
    error_message text not null,
    created_at timestamptz not null default now()
);

-- enable row level security for the 'generation_error_logs' table.
alter table generation_error_logs enable row level security;

-- indexes
-- index for fetching all generations for a specific user.
create index idx_generations_user_id on generations(user_id);

-- index for fetching all flashcards for a specific user.
create index idx_flashcards_user_id on flashcards(user_id);

-- index for fetching all flashcards from a specific generation.
create index idx_flashcards_generation_id on flashcards(generation_id);

-- index for fetching all error logs for a specific user.
create index idx_generation_error_logs_user_id on generation_error_logs(user_id);

-- functions and triggers for 'updated_at'
-- this function automatically updates the 'updated_at' timestamp on row modification.
create or replace function handle_updated_at()
returns trigger as $$
begin
    new.updated_at = now();
    return new;
end;
$$ language plpgsql;

-- trigger for the 'generations' table to update 'updated_at' on row modification.
create trigger on_generations_update
before update on generations
for each row execute procedure handle_updated_at();

-- trigger for the 'flashcards' table to update 'updated_at' on row modification.
create trigger on_flashcards_update
before update on flashcards
for each row execute procedure handle_updated_at();

-- row level security policies

-- policies for 'generations' table
-- anon users should not be able to access generation records.
create policy "allow_anon_to_generations_select" on generations for select to anon using (false);
create policy "allow_anon_to_generations_insert" on generations for insert to anon with check (false);
create policy "allow_anon_to_generations_update" on generations for update to anon using (false) with check (false);
create policy "allow_anon_to_generations_delete" on generations for delete to anon using (false);

-- authenticated users can manage their own generation records.
create policy "allow_authenticated_to_generations_select" on generations for select to authenticated using (auth.uid() = user_id);
create policy "allow_authenticated_to_generations_insert" on generations for insert to authenticated with check (auth.uid() = user_id);
create policy "allow_authenticated_to_generations_update" on generations for update to authenticated using (auth.uid() = user_id) with check (auth.uid() = user_id);
create policy "allow_authenticated_to_generations_delete" on generations for delete to authenticated using (auth.uid() = user_id);

-- policies for 'flashcards' table
-- anon users should not be able to access flashcards.
create policy "allow_anon_to_flashcards_select" on flashcards for select to anon using (false);
create policy "allow_anon_to_flashcards_insert" on flashcards for insert to anon with check (false);
create policy "allow_anon_to_flashcards_update" on flashcards for update to anon using (false) with check (false);
create policy "allow_anon_to_flashcards_delete" on flashcards for delete to anon using (false);

-- authenticated users can manage their own flashcards.
create policy "allow_authenticated_to_flashcards_select" on flashcards for select to authenticated using (auth.uid() = user_id);
create policy "allow_authenticated_to_flashcards_insert" on flashcards for insert to authenticated with check (auth.uid() = user_id);
create policy "allow_authenticated_to_flashcards_update" on flashcards for update to authenticated using (auth.uid() = user_id) with check (auth.uid() = user_id);
create policy "allow_authenticated_to_flashcards_delete" on flashcards for delete to authenticated using (auth.uid() = user_id);

-- policies for 'generation_error_logs' table
-- anon users should not be able to access generation error logs.
create policy "allow_anon_to_generation_error_logs_select" on generation_error_logs for select to anon using (false);
create policy "allow_anon_to_generation_error_logs_insert" on generation_error_logs for insert to anon with check (false);
create policy "allow_anon_to_generation_error_logs_update" on generation_error_logs for update to anon using (false) with check (false);
create policy "allow_anon_to_generation_error_logs_delete" on generation_error_logs for delete to anon using (false);

-- authenticated users can manage their own generation error logs.
create policy "allow_authenticated_to_generation_error_logs_select" on generation_error_logs for select to authenticated using (auth.uid() = user_id);
create policy "allow_authenticated_to_generation_error_logs_insert" on generation_error_logs for insert to authenticated with check (auth.uid() = user_id);
create policy "allow_authenticated_to_generation_error_logs_update" on generation_error_logs for update to authenticated using (auth.uid() = user_id) with check (auth.uid() = user_id);
create policy "allow_authenticated_to_generation_error_logs_delete" on generation_error_logs for delete to authenticated using (auth.uid() = user_id);
